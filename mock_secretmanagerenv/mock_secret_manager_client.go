// Code generated by MockGen. DO NOT EDIT.
// Source: secret_manager_client.go

// Package mock_secretmanagerenv is a generated GoMock package.
package mock_secretmanagerenv

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	secretmanager "google.golang.org/genproto/googleapis/cloud/secretmanager/v1"
	reflect "reflect"
)

// MocksecretManagerClient is a mock of secretManagerClient interface
type MocksecretManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MocksecretManagerClientMockRecorder
}

// MocksecretManagerClientMockRecorder is the mock recorder for MocksecretManagerClient
type MocksecretManagerClientMockRecorder struct {
	mock *MocksecretManagerClient
}

// NewMocksecretManagerClient creates a new mock instance
func NewMocksecretManagerClient(ctrl *gomock.Controller) *MocksecretManagerClient {
	mock := &MocksecretManagerClient{ctrl: ctrl}
	mock.recorder = &MocksecretManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksecretManagerClient) EXPECT() *MocksecretManagerClientMockRecorder {
	return m.recorder
}

// AccessSecretVersion mocks base method
func (m *MocksecretManagerClient) AccessSecretVersion(ctx context.Context, req *secretmanager.AccessSecretVersionRequest, opts ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccessSecretVersion", varargs...)
	ret0, _ := ret[0].(*secretmanager.AccessSecretVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessSecretVersion indicates an expected call of AccessSecretVersion
func (mr *MocksecretManagerClientMockRecorder) AccessSecretVersion(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessSecretVersion", reflect.TypeOf((*MocksecretManagerClient)(nil).AccessSecretVersion), varargs...)
}
